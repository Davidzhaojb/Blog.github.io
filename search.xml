<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>angular7+ionic4+ngx-quill配置</title>
      <link href="/2019/11/20/angular7-ionic4-ngx-quill%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/11/20/angular7-ionic4-ngx-quill%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>下载依赖</strong></p><pre><code class="typescript">npm install ngx-quill --save</code></pre><blockquote><p>对于使用Angular &lt;v5.0.0安装的项目 npm install <a href="mailto:ngx-quill@1.6.0" target="_blank" rel="noopener">ngx-quill@1.6.0</a></p></blockquote><table><thead><tr><th>Angular</th><th>ngx-quill</th><th>supported/maintained</th></tr></thead><tbody><tr><td>v8</td><td>&gt;= 5.2.0</td><td>until Nov 22, 2020</td></tr><tr><td>v7</td><td>&gt;= 4.0.0</td><td>until Apr 18, 2020</td></tr><tr><td>v6</td><td>&gt;= 3.0.0</td><td>until Nov 3, 2019</td></tr><tr><td>v5</td><td>&gt;= 1.6.0</td><td></td></tr><tr><td>v4</td><td>&gt;= 1.6.0</td><td></td></tr></tbody></table><p><strong>global.scss</strong></p><pre><code class="scss">@import &#39;~quill/dist/quill.core.css&#39;;@import &#39;~quill/dist/quill.snow.css&#39;;[contenteditable] {  -webkit-user-select: text;  user-select: text;}</code></pre><p><strong>angular.json</strong></p><pre><code class="json"> &quot;scripts&quot;: [    &quot;./node_modules/quill/dist/quill.min.js&quot;            ]</code></pre><p><strong>home.page.html</strong></p><pre><code class="html">&lt;quill-editor&gt;&lt;/quill-editor&gt;</code></pre><p><strong>home.module.ts</strong></p><pre><code class="typescript">import { IonicModule } from &#39;@ionic/angular&#39;;import { RouterModule } from &#39;@angular/router&#39;;import { NgModule } from &#39;@angular/core&#39;;import { CommonModule } from &#39;@angular/common&#39;;import { FormsModule } from &#39;@angular/forms&#39;;import { HomePage } from &#39;./home.page&#39;;import { ShareModule } from &#39;src/shared/share.module&#39;;import { QuillModule } from &#39;ngx-quill&#39;;@NgModule({    imports: [        IonicModule,        CommonModule,        FormsModule,        ShareModule,        QuillModule.forRoot(),        RouterModule.forChild([{ path: &#39;&#39;, component: HomePage }])    ],    declarations: [HomePage],    providers: []})export class HomePageModule { }</code></pre><blockquote><p><a href="https://www.npmjs.com/package/ngx-quill" target="_blank" rel="noopener">参考地址:https://www.npmjs.com/package/ngx-quill</a><br><a href="https://github.com/Davidzhaojb/ngx-quill-ionic-v4" target="_blank" rel="noopener">代码地址:https://github.com/Davidzhaojb/ngx-quill-ionic-v4</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> quill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngx-quill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos+docker+mysql</title>
      <link href="/2019/11/19/centos-docker-mysql/"/>
      <url>/2019/11/19/centos-docker-mysql/</url>
      
        <content type="html"><![CDATA[<p><strong>安装docker</strong></p><pre><code class="bash">yum install docker</code></pre><p><strong>启动docker</strong></p><pre><code class="bash">service docker start </code></pre><p><strong>下载镜像</strong></p><pre><code class="bash">docker pull mysql:5.7</code></pre><p><strong>启动&amp;配置mysql</strong></p><pre><code class="bash">启动命令：docker run -p 3306:3306 --name mysqldb -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=a123456 -idt mysql:5.7</code></pre><p>参数说明</p><ul><li>–name：给新创建的容器命名，此处命名为</li><li>-e：配置信息，此处配置mysql的root用户的登陆密码,实例为123456，自行设置</li><li>-p：端口映射，此处映射主机3306端口到容器pwc-mysql的3306端口</li><li>-d：成功启动容器后输出容器的完整ID，例如上图, 最后一个mysql指的是mysql镜像名字<br><strong>开启服务器的3306端口</strong><br>在服务器后台开启端口</li></ul><!-- __链接mysql报错__![image](http://downloadwebjs.com/mysql/Snip20191119_1.png);> 解决方法1.进入mysql容器 `docker exec -it mysql_o1 bash`2.连接 `mysql mysql -uroot -p`3.更改加密方式：`mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;`4.更改密码：（如上面的也不行可以修改下密码）`mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';`5.刷新`mysql> FLUSH PRIVILEGES;`6.退出控制台 --><p>docker run -p 3306:3306 –name mysqldb -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=a123456 -idt mysql:5.7<br>授权<br>grant all privileges on fruitGame.* to game@’%’ identified by ‘game2019’;<br>flush privileges; //刷新系统权限表</p><p><a href="https://juejin.im/post/5c000b455188251b8a2700c6" target="_blank" rel="noopener">参考地址:https://juejin.im/post/5c000b455188251b8a2700c</a>;</p>]]></content>
      
      
      <categories>
          
          <category> preliminary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter项目左上角收缩栏制作</title>
      <link href="/2019/11/18/Flutter%E9%A1%B9%E7%9B%AE%E5%B7%A6%E4%B8%8A%E8%A7%92%E6%94%B6%E7%BC%A9%E6%A0%8F%E5%88%B6%E4%BD%9C/"/>
      <url>/2019/11/18/Flutter%E9%A1%B9%E7%9B%AE%E5%B7%A6%E4%B8%8A%E8%A7%92%E6%94%B6%E7%BC%A9%E6%A0%8F%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="制作左上角收缩栏"><a href="#制作左上角收缩栏" class="headerlink" title="制作左上角收缩栏"></a>制作左上角收缩栏</h1><p><strong>index_page.dart</strong></p><pre><code class="dart">import &#39;package:flutter/material.dart&#39;;import &#39;../pages/drawer_page.dart&#39;;class Indexpage extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Container(      child: Scaffold(        appBar: AppBar(          title: Text(&#39;Google Translate&#39;),        ),        body: Center(          child: Text(&#39;这是首页&#39;),        ),        drawer: DrawerPage(),      ),    );  }}</code></pre><p><strong>drawer_page</strong></p><pre><code class="dart">import &#39;package:flutter/material.dart&#39;;import &#39;package:flutter/cupertino.dart&#39;;class DrawerPage extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Drawer(        child: ListView(      children: &lt;Widget&gt;[        UserAccountsDrawerHeader(          accountName: Text(&#39;有道云笔记&#39;),  // 如果不需要就设置为null          accountEmail: Text(&#39;Test@qq.com&#39;),          currentAccountPicture: null,          decoration: BoxDecoration(              image: DecorationImage(            fit: BoxFit.cover,            image: NetworkImage(&#39;&#39;),          )),        ),        ListTile(          title: Text(&#39;首页&#39;),          leading: Icon(CupertinoIcons.home),          onTap: () {},        ),        ListTile(          title: Text(&#39;翻译收藏夹&#39;),          leading: Icon(CupertinoIcons.location_solid),          onTap: () {},        ),        ListTile(          title: Text(&#39;离线翻译&#39;),          leading: Icon(CupertinoIcons.music_note),          onTap: () {},        ),        ListTile(          title: Text(&#39;设置&#39;),          leading: Icon(CupertinoIcons.settings),          onTap: () {},        )      ],    ));  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter项目欢迎页制作</title>
      <link href="/2019/11/18/Flutter%E9%A1%B9%E7%9B%AE%E6%AC%A2%E8%BF%8E%E9%A1%B5%E5%88%B6%E4%BD%9C/"/>
      <url>/2019/11/18/Flutter%E9%A1%B9%E7%9B%AE%E6%AC%A2%E8%BF%8E%E9%A1%B5%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎页模板-开箱即用"><a href="#欢迎页模板-开箱即用" class="headerlink" title="欢迎页模板(开箱即用)"></a>欢迎页模板(开箱即用)</h1><p><strong>main.dart</strong></p><pre><code class="dart">import &#39;package:flutter/material.dart&#39;;import &#39;animation/open_animation.dart&#39;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Container(      child: MaterialApp(        title: &#39;Google Translate&#39;,        theme: ThemeData(    // 主题色          primaryColor: Colors.blue[600],          primarySwatch: Colors.blue,        ),        home: OpenAnimation(),      ),    );  }}</code></pre><p><strong>open_animation.dart</strong></p><pre><code class="dart">import &#39;package:flutter/material.dart&#39;;import &#39;../pages/index_page.dart&#39;;class OpenAnimation extends StatefulWidget {  @override  _OpenAnimationState createState() =&gt; _OpenAnimationState();}class _OpenAnimationState extends State&lt;OpenAnimation&gt;    with SingleTickerProviderStateMixin {  AnimationController _controller; // 动画控制器  Animation _animation; // 动画  @override  void initState() {    super.initState();    _controller = AnimationController(      duration: Duration(        seconds: 3,      ),      vsync: this, // 正常情况下这里会报错，上面要继承 with SingleTickerProviderStateMixin    );    _animation = Tween(begin: 0, end: 1).animate(_controller);    _animation.addStatusListener((status) {      if (status == AnimationStatus.completed) {        Navigator.of(context).pushAndRemoveUntil(            // pushAndRemoveUntil打开并删除，不删除会很耗内存            MaterialPageRoute(builder: (context) {          return Indexpage();        }), (route) =&gt; route == null);      }    }); // 监听    _controller.forward();     // 播放  }  @override  Widget build(BuildContext context) {    return Container(      child: FadeTransition(        opacity: _animation,        child: Image.network(&#39;http://downloadwebjs.com/flutter_youdao/splash.png&#39;,fit: BoxFit.cover,),      ),    );  }}</code></pre><p><strong>index_page.dart</strong></p><pre><code class="dart">import &#39;package:flutter/material.dart&#39;;class Indexpage extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Container(      child: Scaffold(        appBar: AppBar(          title: Text(&#39;Google Translate&#39;),        ),        body: Center(          child: Text(&#39;这是首页&#39;),        ),      ),    );  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter基础7.GridView组件</title>
      <link href="/2019/11/18/Flutter%E5%9F%BA%E7%A1%807-GridView%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/11/18/Flutter%E5%9F%BA%E7%A1%807-GridView%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="GridView-网格列表"><a href="#GridView-网格列表" class="headerlink" title="GridView 网格列表"></a>GridView 网格列表</h1><pre><code class="dart">body: GridView.count(    padding:EdgeInsets.all(20.0),    crossAxisSpacing:10.0,  //网格中每个网格的间距    crossAxisCount:3        //一行显示多少列    children:&lt;Widget&gt;[  // children 子元素        Text(&#39;111&#39;),        Text(&#39;222&#39;),        Text(&#39;333&#39;),        Text(&#39;444&#39;),        Text(&#39;444&#39;),        Text(&#39;555&#39;),    ] )</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter基础6.ListView组件</title>
      <link href="/2019/11/18/Flutter%E5%9F%BA%E7%A1%806-ListView%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/11/18/Flutter%E5%9F%BA%E7%A1%806-ListView%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="ListView列表组件"><a href="#ListView列表组件" class="headerlink" title="ListView列表组件"></a>ListView列表组件</h1><pre><code class="dart">body:ListView(    children:&lt;widget&gt;[        ListTile(            leading:Icon(Icons.access_time),            title:Text(&#39;access_time&#39;)        )    ]),</code></pre><p>图片列表跟上面原理类似</p><h1 id="横向列表／纵向列表"><a href="#横向列表／纵向列表" class="headerlink" title="横向列表／纵向列表"></a>横向列表／纵向列表</h1><pre><code class="dart">body:ListView(    scrollDirection: Axis.horizontal, // 水瓶列表    scrollDirection: Axis.vertical    // 纵向列表    children:&lt;widget&gt;[        ListTile(            leading:Icon(Icons.access_time),            title:Text(&#39;access_time&#39;)        )    ]),</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter基础5.Container组件</title>
      <link href="/2019/11/18/Flutter%E5%9F%BA%E7%A1%805-Container%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/11/18/Flutter%E5%9F%BA%E7%A1%805-Container%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h1><p><strong>Alignment</strong> 对齐属性<br>居中对齐</p><pre><code class="dart">Container(    child:Text();    alignement:Alignment.center)</code></pre><p>其他alignement属性</p><ul><li>bottomCenter:下部居中对齐。</li><li>botomLeft: 下部左对齐。</li><li>bottomRight：下部右对齐。</li><li>center：纵横双向居中对齐。</li><li>centerLeft：纵向居中横向居左对齐。</li><li>centerRight：纵向居中横向居右对齐。</li><li>topLeft：顶部左侧对齐。</li><li>topCenter：顶部居中对齐。</li><li>topRight： 顶部居左对齐</li></ul><p><strong>color</strong></p><p><strong>width</strong></p><p><strong>height</strong></p><p><strong>padding</strong><br>设置容器的内边距</p><pre><code class="dart">EdgeInsets.all(10.0) 上下左右全部设置为10EdgeInsets.fromLTRB(0.0,0.0,0.0,0.0); 根据字母顺序设置左上右下的padding</code></pre><p><strong>padding</strong><br>设置容器的外边距，跟padding一样</p><p><strong>decoration</strong><br>设置背景和边框(如果设置了decoration属性，就不要再设置color属性了,会冲突 )</p><pre><code class="dart">decoration:new BoxDecoration(    gradient:const LinearGradient( // 设置渐变      colors:[Colors.lightBlue,Colors.greenAccent,Colors.purple]    ),    border:Border.all(width:2.0,color:Colors.red) // 设置边框样式  ),</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter基础4.Image组件</title>
      <link href="/2019/11/18/Flutter%E5%9F%BA%E7%A1%804-Image%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/11/18/Flutter%E5%9F%BA%E7%A1%804-Image%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Image"><a href="#Image" class="headerlink" title="Image()"></a>Image()</h1><p>四种引入方式</p><ul><li><p>Image.asset()</p></li><li><p>Image.file()</p></li><li><p>Image.memory()</p></li><li><p>Image.network() 引入网络图片</p></li></ul><p><strong>fit属性，控制图片跟容器的关系</strong><br>Image.network( fit:BoxFot.contain ) 尽量充满容器，但是保持原图尺寸不变</p><p>Image.network( fit:BoxFot.fill ) 填满容器，拉伸图片</p><p>Image.network( fit:BoxFot.fitWidth ) 横向充满，纵向可能裁切</p><p>Image.network( fit:BoxFot.fitHeight ) 纵向充满，横向可能裁切</p><p>Image.network( fit:BoxFot.cover ) 充满整个容器，图片不变形</p><p>Image.network( fit:BoxFot.scalDown ) 保持原图片大小，没什么效果</p><p><strong>colorBlendMode:BlendMode.darken,颜色叠加</strong><br>Image.network( colorBlendMode:BlendMode.darken )</p><p><strong>repeat 图片重复属性</strong></p><pre><code class="dart">repeat(ImageRepeat.noRepeat); 不重复repeat(ImageRepeat.repeat); 重复repeat(ImageRepeat.repeatX); 横向重复repeat(ImageRepeat.repeatY); 纵向重复</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter基础3.按钮组件</title>
      <link href="/2019/11/18/Flutter%E5%9F%BA%E7%A1%803-%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/11/18/Flutter%E5%9F%BA%E7%A1%803-%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Material组件库中的按钮"><a href="#Material组件库中的按钮" class="headerlink" title="Material组件库中的按钮"></a>Material组件库中的按钮</h1><p>Material 组件库中提供了多种按钮组件如RaisedButton、FlatButton、OutlineButton等，它们都是直接或间接对RawMaterialButton组件的包装定制，所以他们大多数属性都和RawMaterialButton一样。在介绍各个按钮时我们先介绍其默认外观，而按钮的外观大都可以通过属性来自定义，我们在后面统一介绍这些属性。另外，所有Material 库中的按钮都有如下相同点：</p><ul><li>按下时都会有“水波动画”（又称“涟漪动画”，就是点击时按钮上会出现水波荡漾的动画）。</li><li>有一个onPressed属性来设置点击回调，当按钮按下时会执行该回调，如果不提供该回调则按钮会处于禁用状态，禁用状态不响应用户点击。</li></ul><ol><li><p>RaisedButton<br>漂浮按钮，默认带有阴影和灰色背景。按下后阴影会变大<br><img src="http://downloadwebjs.com/flutter%E5%9F%BA%E7%A1%80/Snip20191118_1.png" alt="image">;</p><pre><code class="dart">RaisedButton(child: Text(&quot;normal&quot;),onPressed: () {},);</code></pre></li><li><p>FlatButton<br>FlatButton即扁平按钮，默认背景透明并不带阴影。按下后，会有背景色<br><img src="http://downloadwebjs.com/flutter%E5%9F%BA%E7%A1%80/Snip20191118_2.png" alt="image">;</p><pre><code class="dart">FlatButton(child: Text(&quot;normal&quot;),onPressed: () {},)</code></pre></li><li><p>OutlineButton<br>OutlineButton默认有一个边框，不带阴影且背景透明。按下后，边框颜色会变亮、同时出现背景和阴影(较弱)<br><img src="http://downloadwebjs.com/flutter%E5%9F%BA%E7%A1%80/Snip20191118_3.png" alt="image"></p><pre><code class="dart">OutlineButton(child: Text(&quot;normal&quot;),onPressed: () {},)</code></pre></li><li><p>IconButton<br>IconButton是一个可点击的Icon，不包括文字，默认没有背景，点击后会出现背景<br><img src="http://downloadwebjs.com/flutter%E5%9F%BA%E7%A1%80/Snip20191118_4.png" alt="image"></p><pre><code class="dart">IconButton(icon: Icon(Icons.thumb_up),onPressed: () {},)</code></pre></li><li><p>带图标的按钮<br>RaisedButton、FlatButton、OutlineButton都有一个icon 构造函数，通过它可以轻松创建带图标的按钮<br><img src="http://downloadwebjs.com/flutter%E5%9F%BA%E7%A1%80/Snip20191118_5.png" alt="image"></p><pre><code class="dart">RaisedButton.icon(icon: Icon(Icons.send),label: Text(&quot;发送&quot;),onPressed: _onPressed,),OutlineButton.icon(icon: Icon(Icons.add),label: Text(&quot;添加&quot;),onPressed: _onPressed,),FlatButton.icon(icon: Icon(Icons.info),label: Text(&quot;详情&quot;),onPressed: _onPressed,),</code></pre></li><li><p>自定义外观按钮<br>按钮外观可以通过其属性来定义，不同按钮属性大同小异,以FlatButton为例<br><img src="http://downloadwebjs.com/flutter%E5%9F%BA%E7%A1%80/Snip20191118_6.png" alt="image"></p><pre><code class="dart">const FlatButton({...  @required this.onPressed, //按钮点击回调this.textColor, //按钮文字颜色this.disabledTextColor, //按钮禁用时的文字颜色this.color, //按钮背景颜色this.disabledColor,//按钮禁用时的背景颜色this.highlightColor, //按钮按下时的背景颜色this.splashColor, //点击时，水波动画中水波的颜色this.colorBrightness,//按钮主题，默认是浅色主题 this.padding, //按钮的填充this.shape, //外形@required this.child, //按钮的内容})</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter基础2.Text()组件</title>
      <link href="/2019/11/18/Flutter%E5%9F%BA%E7%A1%802-Text-%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/11/18/Flutter%E5%9F%BA%E7%A1%802-Text-%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Text"><a href="#Text" class="headerlink" title="Text()"></a>Text()</h1><p><strong>title 文字内容</strong></p><pre><code class="dart">Text(&quot;Hello world &quot;*6,  //字符串重复六次  textAlign: TextAlign.center,)；</code></pre><p><strong>textAlign</strong><br>文本的对齐方式；可以选择左对齐、右对齐还是居中。注意，对齐的参考系是Text widget本身。本例中虽然是指定了居中对齐，但因为Text文本内容宽度不足一行，Text的宽度和文本内容长度相等，那么这时指定对齐方式是没有意义的，只有Text宽度大于文本内容长度时指定此属性才有意义。</p><pre><code class="dart">TextAlign.left文字对齐方式（left，center，right,start,end）</code></pre><p><strong>maxLine:</strong><br>最大显示行数，是几就显示几行，溢出不显示<br><strong>overflow:</strong></p><pre><code class="dart">TextOverflow.clip 文字溢出截断，不显示TextOverflow.ellipsis 溢出显示三个点TextOverflow.fade  渐变效果消失</code></pre><p><strong>style</strong></p><pre><code class="dart">TextStyle(fontSize:25.0,  //字体大小color:Color.fromARGB(a,r,g,b),  //颜色height:1.2,background:Colors.yellow,decoration:TextDecroation.underline,  //下划线decorationStyle:TextDecroationStyle.solid  //下划线样式) 设置字体样式</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter基础1.Flutter的特性</title>
      <link href="/2019/11/18/Flutter%E5%9F%BA%E7%A1%801-Flutter%E7%9A%84%E7%89%B9%E6%80%A7/"/>
      <url>/2019/11/18/Flutter%E5%9F%BA%E7%A1%801-Flutter%E7%9A%84%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter的特性"><a href="#Flutter的特性" class="headerlink" title="Flutter的特性"></a>Flutter的特性</h3><p><strong>跨平台</strong></p><blockquote><p>Flutter是谷歌新一代跨平台UI框架，除了默认支持Android，ios，经过扩展后还支持pc，web</p></blockquote><p><strong>高性能</strong></p><blockquote><p>界面可达60FPS，渲染效率和用户体验堪比Native</p></blockquote><blockquote><p>FLutter在release下会编译成Native ARM code，使得跨平台的代码运行效率很高</p></blockquote><blockquote><p>Native 和 Flutter 之间是通过 JNI 桥接的，也使得 Native 和 Flutter 之间交互的损耗很低。</p></blockquote><p><strong>丰富的UI组件</strong></p><blockquote><p>Flutter 内置众多精美的 Material Design（Android风格）和 Cupertino（iOS风格）的小部件，而且 UI 样式高度还原 Native 的样式，可以让我们直接使用，而且这些组件都很方便组合，还有丰富的动画库。</p></blockquote><p><strong>学习成本低</strong></p><blockquote><p>Flutter 的学习成本很低，屏蔽了底层的很多实现，可以很快的入手。这也带来一个问题，就是没有办法深入 Flutter 的底层，这也是本教程的目的，除了 Flutter 的使用，也会深入分析 Flutter 的底层实现。</p></blockquote><p><strong>开发效率高</strong></p><blockquote><p>拥有丰富的UI部件，而且支持Hot Reload，同时Flutter使用Dart语言开发，Dart具备很多新的语言特性，可以使得开发速度很快。</p></blockquote><p><strong>和任何平台的交互都很方便</strong></p><p><strong>一次编写，到处运行</strong></p><h3 id="Flutter的四种版本"><a href="#Flutter的四种版本" class="headerlink" title="Flutter的四种版本"></a>Flutter的四种版本</h3><p><strong>master</strong></p><blockquote><p>master 分支上的代码是最新的，所以包含新的特性</p></blockquote><blockquote><p>但是 master 分支上的代码没有经过测试，很可能会出现各种各样的 bug。</p></blockquote><p><strong>dev</strong></p><blockquote><p>Google 工程师会定期将 master 分支的代码滚动到 dev 分支上，在执行滚动的过程中，会对代码进行 Google 的内部测试，所以 dev 渠道是通过测试的最新的构建。但并不意味着 dev 版本不会有 bug，因为这个测试只是最基础的测试，一旦发现有严重的阻塞性的 bug，就会把这个 dev版本列为Bad Builds ，而且这个版本也不会被选为 beta 版本。</p></blockquote><p><strong>beta</strong></p><blockquote><p>beta 渠道的更新频率是一个月，每个月初，Flutter 团队会从前一个月左右的 dev 版本中选取最佳版本作为 beta 版发布，这个版本最起码在 dev 分支上使用一周的时间，且没有新的严重的 bug</p></blockquote><p><strong>stable</strong></p><blockquote><p>stable 渠道的更新频率是一个季度，每个季度发布一次或几次版本，但 stable 的发布频率是不确定的。stable 版本从 beta 分支中选出，只有当 Flutter 团队确定 beta 分支中有一个非常稳定非常好的构建时，而且通常 stable 版本的发布会在对外的公共活动中公布，例如 Flutter Live。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular7父子组件以及父子组件之间的通信 非父子组件之间传值</title>
      <link href="/2019/11/15/Angular7%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
      <url>/2019/11/15/Angular7%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="父组件给子组件传值-input"><a href="#父组件给子组件传值-input" class="headerlink" title="父组件给子组件传值 @input"></a>父组件给子组件传值 @input</h2><ul><li>先在父组件ts中定义一个属性<pre><code class="typescript">public title: string = &#39;我是首页组件的标题&#39;;</code></pre></li><li>在父组件html页面元素中绑定属性<pre><code class="typescript">&lt;app-header [title]=&quot;title&quot;&gt;&lt;/app-header&gt;</code></pre></li><li>在子组件中引入Input<pre><code class="typescript">import { Component, OnInit, Input } from &#39;@angular/core&#39;;</code></pre></li><li>在子组件ts文件中获取父组件传过来的值<pre><code class="typescript">//接受父组件传过来的数据@Input() title: any;</code></pre></li><li>在子组件页面元素中绑定父组件传过来的值<pre><code class="typescript">&lt;header&gt;{{title}}&lt;/header&gt;</code></pre></li></ul><h2 id="父组件给子组件传方法"><a href="#父组件给子组件传方法" class="headerlink" title="父组件给子组件传方法"></a>父组件给子组件传方法</h2><ul><li>先在父组件ts文件中定义一个方法<pre><code class="typescript">run() {  alert(&#39;我是父组件中的一个方法&#39;);}</code></pre></li><li>在子组件html页面中定义一个button<pre><code class="typescript">&lt;button (click)=&quot;doFaRun()&quot;&gt;子组件执行父组件中的方法&lt;/button&gt;</code></pre></li><li>在父组件中绑定方法<pre><code class="typescript">&lt;app-header [run]=&quot;run&quot;&gt;&lt;/app-header&gt;</code></pre></li><li>在子组件接收方法<pre><code class="typescript">@Input() run: any;</code></pre></li><li>在子组件ts文件中实现这个方法<pre><code class="typescript">//执行父组件的方法doFaRun() {this.run();}</code></pre><h2 id="将整个父组件传给子组件"><a href="#将整个父组件传给子组件" class="headerlink" title="将整个父组件传给子组件"></a>将整个父组件传给子组件</h2></li><li>在子组件ts文件中定义home属性<pre><code class="typescript">@Input() home: any;</code></pre></li><li>在父组件html中绑定home<pre><code class="typescript">&lt;app-header [home]=&quot;this&quot;&gt;&lt;/app-header&gt;</code></pre></li><li>在子组件ts文件中调用<pre><code class="typescript"> //执行父组件的方法doFaRun() {  alert(this.home.msg);  this.home.run();}</code></pre><h2 id="子组件给子父组件传值"><a href="#子组件给子父组件传值" class="headerlink" title="子组件给子父组件传值"></a>子组件给子父组件传值</h2></li><li>先在子组件中定义一个数据和方法<pre><code class="typescript">public msg: string = &quot;我是子组件的一个msg&quot;;</code></pre><pre><code class="typescript">run() {alert(&quot;我是子组件的一个方法&quot;);}</code></pre></li><li>在父组件html文件中给子组件起一个名字<pre><code class="typescript">&lt;app-footer #footer&gt;&lt;/app-footer&gt;</code></pre></li><li>在父组件中写两个按钮，并在父组件ts文件中实例化这两个方法<pre><code class="typescript">&lt;button (click)=&quot;getChildMsg()&quot;&gt;获取子组件定义的msg&lt;/button&gt;&lt;br&gt;&lt;br&gt;&lt;button (click)=&quot;doChildRun()&quot;&gt;执行子组件定义的方法&lt;/button&gt;</code></pre><pre><code class="typescript">getChildMsg() {} //获取子组件定义的msgdoChildRun() {}  //执行子组件定义的方法</code></pre></li><li>在父组件ts文件中引入viewChild<pre><code class="typescript">import { ViewChild } from &#39;@angular/core&#39;;</code></pre></li><li>在父组件html中获取到子组件<pre><code class="typescript">@ViewChild(&quot;footer&quot;) footer: any;</code></pre></li><li>在父组件中调用<pre><code class="typescript">//获取子组件定义的msg，执行子组件中的方法getChildMsg() {alert(this.footer.msg);}</code></pre><pre><code class="typescript">//执行子组件定义的方法doChildRun() {this.footer.run();}</code></pre></li></ul><h2 id="父组件监听子组件发射的事件"><a href="#父组件监听子组件发射的事件" class="headerlink" title="父组件监听子组件发射的事件"></a>父组件监听子组件发射的事件</h2><ul><li>子组件引入outpute<pre><code class="typescript">import { Component, OnInit, Input, Output, EventEmitter } from &#39;@angular/core&#39;;@Output() doFilter: EventEmitter&lt;any&gt; = new EventEmitter();</code></pre></li><li>子组件通过方法发射要传递的数据<pre><code class="typescript">Filter(value) {  this.doFilter.emit(value);}</code></pre></li><li>父组建接收参数<pre><code class="html">&lt;app-base-segment (doFilter)=&quot;getFilter($event)&quot;&gt;&lt;/app-base-segment&gt;</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter实战：(2)编写入口文件</title>
      <link href="/2019/11/14/Flutter%E5%AE%9E%E6%88%98%EF%BC%9A-2-%E7%BC%96%E5%86%99%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6/"/>
      <url>/2019/11/14/Flutter%E5%AE%9E%E6%88%98%EF%BC%9A-2-%E7%BC%96%E5%86%99%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="项目建立"><a href="#项目建立" class="headerlink" title="项目建立"></a>项目建立</h3><pre><code class="dart">flutter create flutter_shop</code></pre><h3 id="入口文件的编写"><a href="#入口文件的编写" class="headerlink" title="入口文件的编写"></a>入口文件的编写</h3><p>修改main.dart</p><pre><code class="dart">import &#39;package:flutter/material.dart&#39;;void main()=&gt;runApp(MyApp());class MyApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Container(         // 尽量都是用container容器包裹起来      child: MaterialApp(        title:&#39;百姓生活+&#39;,        debugShowCheckedModeBanner: false,   // 右上角的debuge不显示        theme: ThemeData(       //设置主题色          primaryColor:Colors.pink        ),        home:IndexPage()      ),    );  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8是怎么跑起来的</title>
      <link href="/2019/11/14/V8%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/"/>
      <url>/2019/11/14/V8%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么是V8"><a href="#为什么是V8" class="headerlink" title="为什么是V8"></a>为什么是V8</h3><p>一个前端界的著名定律，叫做==Atwoods Law==</p><blockquote><p>所有可以用javascript编写的程序，最终都会用javascript编写</p></blockquote><h3 id="关于V8的知识点"><a href="#关于V8的知识点" class="headerlink" title="关于V8的知识点"></a>关于V8的知识点</h3><p>V8是使用C++编写的高性能JavaScript和WebAssembly引擎<br><strong>V8的发布周期</strong></p><ul><li>大约每隔六周，就会有一个新的V8版本推出</li><li>V8版本与chrom版本对应，比如V8 v7.8对应Chrom 78</li></ul><p><strong>V8的重要部件</strong></p><ul><li>Ignition(基线编译器)</li><li>TurboFan(优化编译器)</li><li>Orinoco(垃圾回收器)</li><li>Liftoff(WebAssembly 基线编译器)</li></ul><h3 id="V8-的-JavaScript-执行管道"><a href="#V8-的-JavaScript-执行管道" class="headerlink" title="V8 的 JavaScript 执行管道"></a>V8 的 JavaScript 执行管道</h3><ul><li><p>解析器将JavaScript源代码转换成AST，基线编译器将AST编译为字节码，当代码满足一定条件时，将被优化编译器重新编译生成优化的字节码</p></li><li><p>这里不得不提一下分层思想，在执行管道改进的过程中，通过引入IR(intermediate representation，中间表示)，有效的提升了系统可扩展性，降低了关联模块的就合度以及系统的复杂度</p></li><li><p>举个例子，有 A、B、C 三个特性需要迁移到两个处理器平台。在引入 IR 之前，需要有 3 * 2 = 6 种代码实现，在引入 IR 之后，需要 3 + 2 = 5 种代码实现。可以看出，一个是乘法的关系，一个是加法的关系。当需要实现很多特性并适配多种处理器架构时，引入 IR 的优势便大大增加了</p></li></ul><h3 id="解析器与AST"><a href="#解析器与AST" class="headerlink" title="解析器与AST"></a>解析器与AST</h3><ul><li><p>解析代码需要时间，所以JavaScript引擎会尽可能避免完全解析代码源文件。另一方面，再一次用户访问中，页面中会有很多代码不被执行到，比如，通过用户交互触发的行为</p></li><li><p>正因为如此，所有主流浏览器都实现了惰性解析(lazy parsing<br>)，解析器不必为每个函数生成AST(Abstract Syntax tree，抽象语法树)，而是可以决定”预解析“或者”完全解析“</p></li><li><p>预解析会检查源代码的语法并抛出语法错误，但不会解析函数中变量的作用域或生成 AST。完全解析则将分析函数体并生成源代码对应的 AST 数据结构。相比正常解析，预解析的速度快了 2 倍。</p></li><li><p>生成 AST 主要经过两个阶段：分词和语义分析。AST 旨在通过一种结构化的树形数据结构来描述源代码的具体语法组成，常用于语法检查（静态代码分析）、代码混淆、代码优化等</p></li></ul><h3 id="基线编译器-Ignition-与字节码"><a href="#基线编译器-Ignition-与字节码" class="headerlink" title="基线编译器 Ignition 与字节码"></a>基线编译器 Ignition 与字节码</h3><blockquote><p>V8引入JIT(Just In Time，即时编译)技术，通过Ignition基线编译器快速生成字节码进行执行</p></blockquote><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><blockquote><p>当内存不再需要的时候，会被周期性运行的垃圾回收器回收。</p></blockquote><blockquote><p>任何垃圾回收期都有一些必须顶起完成的基本任务</p></blockquote><ol><li>确定存活/死亡对象</li><li>回收/再利用死亡对象所占用的内存</li><li>压缩/整理内存(可选)</li></ol><p>V8de 垃圾回收有三个阶段：标记，清楚和整理</p><p><strong>世代假说</strong></p><blockquote><p>时代假说，也成为弱分代假说。这个假说表明，大多数新生的对象在分配之后就会死亡(’用后即焚‘),而老的对象通常倾向于永生。</p></blockquote><p>V8的垃圾回收基于世代假说，将内存分为新生代，老生代。</p><p><img src="http://downloadwebjs.com/20191114/20191114_07.png" alt="image"></p><blockquote><p>如图所示，新生代内部进一步细分为 Nursery 和 Intermediate 子世代（划分只是逻辑上的）。新生对象会被分配到新生代的 Nursery 子世代。若对象在第一次垃圾回收中存活，它的标志位将发生改变，进入逻辑上的 Intermediate 子世代，在物理存储上仍存在于新生代中。如果对象在下一次垃圾回收中再次存活，就会进入老生代。对象从新生代进入到老生代的过程叫做晋升(promotion)</p></blockquote><blockquote><p>V8 在新生代和老生代采用了不同的垃圾回收策略，使垃圾回收更有针对性、更加高效。同时，V8 对新生代和老生代的内存大小也进行了限制</p></blockquote><p><img src="http://downloadwebjs.com/20191114/20191114_08.png" alt="image"><br>需要注意的是，随着内存增大，垃圾回收的次数会减少，但每次所需的时间也会增加，将会对应用的性能和响应能力产生负面影响，因此内存并不是越大越好。</p><h3 id="代码缓存"><a href="#代码缓存" class="headerlink" title="代码缓存"></a>代码缓存</h3><p>在chrom浏览器中，有很多功能或多或少的影响了javascript的执行过程，其中一个功能是代码缓存</p><p>在用户访问相同的页面，并且该页面关联的脚本文件没有任何改动的情况下，代码缓存技术会让 JavaScript 的加载和执行变得更快。<br><img src="http://downloadwebjs.com/20191114/20191114_09.png" alt="image"><br><strong>代码缓存被分为 cold、warm、hot 三个等级。</strong></p><ol><li>用户首次请求 JS 文件时（即 cold run），Chrome 将下载该文件并将其提供给 V8 进行编译，并将该文件缓存到磁盘中。</li><li>当用户第二次请求这个 JS 文件时（即 warm run），Chrome 将从浏览器缓存中获取该文件，并将其再次交给 V8 进行编译。在 warm run 阶段编译完成后，编译的代码会被反序列化，作为元数据附加到缓存的脚本文件中。</li><li>当用户第三次请求这个 JS 文件时（即 hot run），Chrome 从缓存中获取文件和元数据，并将两者交给 V8。V8 将跳过编译阶段，直接反序列化元数据。</li></ol><p><a href="https://juejin.im/post/5dc4d823f265da4d4c202d3b?utm_source=gold_browser_extension" target="_blank" rel="noopener">参考地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Chrom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人收藏</title>
      <link href="/2019/11/14/%E4%B8%AA%E4%BA%BA%E6%94%B6%E8%97%8F/"/>
      <url>/2019/11/14/%E4%B8%AA%E4%BA%BA%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>优质网站</title>
      <link href="/2019/11/14/%E4%BC%98%E8%B4%A8%E7%BD%91%E7%AB%99/"/>
      <url>/2019/11/14/%E4%BC%98%E8%B4%A8%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p><font color=red>前端</font></p><p><a href="https://juejin.im/" target="_blank" rel="noopener">掘金</a><br><a href="https://segmentfault.com/" target="_blank" rel="noopener">思否</a><br><a href="https://www.bootcss.com/" target="_blank" rel="noopener">bootstrap</a></p><p><font color=red>后端</font></p><p><font color=red>UI 设计</font></p><p><a href="https://www.zcool.com.cn/" target="_blank" rel="noopener">站酷</a><br><a href="https://www.canva.com/" target="_blank" rel="noopener">自定义海报</a><br><a href="https://appicon.co/" target="_blank" rel="noopener">生成appicon</a><br><a href="https://huaban.com/" target="_blank" rel="noopener">花瓣</a><br><a href="https://compressjpeg.com/zh/" target="_blank" rel="noopener">图片压缩</a><br><font color=red>视频教程</font></p><p><font color=red>博客</font></p><p><font color=red>Other</font></p><p><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">Markdown 编辑器语法指南</a><br><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">资源下载</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> goodweisite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic打包</title>
      <link href="/2019/11/14/ionic%E6%89%93%E5%8C%85/"/>
      <url>/2019/11/14/ionic%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a><font color=red>安卓</font></h1><p><a href="https://app.yinxiang.com/fx/0608a8a8-c2f8-497d-bbf4-593f589e539d" target="_blank" rel="noopener">其他参考资料</a><br>第一步 编译</p><pre><code class="bash">sudo ionic cordova build android --prod --release</code></pre><p>第二步 生成jsk密钥文件</p><pre><code class="bash">keytool -genkey -v -keystore name-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-alias</code></pre><p>第三步<br>h03</p><pre><code class="bash">sudo jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore hongniu-release-key.jks /Users/fullwin/Documents/bocai/H03/H03-mobile/platforms/android/build/outputs/apk/android-release-unsigned.apk my-alias</code></pre><p>TY2</p><pre><code class="bash">sudo jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore taiyang2-release-key.jks /Users/fullwin/Documents/bocai/TY2/TY2-Mobile/platforms/android/build/outputs/apk/android-release-unsigned.apk my-alias</code></pre><p>XB3</p><pre><code class="bash">sudo jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore xinbao3-release-key.jks /Users/fullwin/Documents/bocai/xinbao3/platforms/android/build/outputs/apk/android-release-unsigned.apk my-alias</code></pre><p>XB5</p><pre><code class="bash">sudo jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore name-release-key.jks /Users/fullwin/Documents/bocai/xinbao5/Mobile/platforms/android/build/outputs/apk/android-release-unsigned.apk my-alias</code></pre><p>第四步<br>h03</p><pre><code class="bash">sudo /Users/fullwin/Library/Android/sdk/build-tools/27.0.2/zipalign -v 4 /Users/fullwin/Documents/bocai/H03/H03-mobile/platforms/android/build/outputs/apk/android-release-unsigned.apk  com.kefu.H03_V2.2.09_release.apk</code></pre><p>TY2</p><pre><code class="bash">sudo /Users/fullwin/Library/Android/sdk/build-tools/27.0.2/zipalign -v 4 /Users/fullwin/Documents/bocai/TY2/TY2-Mobile/platforms/android/build/outputs/apk/android-release-unsigned.apk com.kefu.TY2_V1.1.36_release.apk</code></pre><p>XB3</p><pre><code class="bash">sudo /Users/fullwin/Library/Android/sdk/build-tools/27.0.2/zipalign -v 4 /Users/fullwin/Documents/bocai/xinbao3/platforms/android/build/outputs/apk/android-release-unsigned.apk com.kefu.xinbao3-v0.3.31-release.apk</code></pre><p>XB5</p><pre><code class="bash">sudo /Users/fullwin/Library/Android/sdk/build-tools/27.0.2/zipalign -v 4 /Users/fullwin/Documents/bocai/xinbao5/Mobile/platforms/android/build/outputs/apk/android-release-unsigned.apk xinbao5-v0.5.36.apk</code></pre><p>第五步<br>h03</p><pre><code class="bash">/Users/fullwin/Library/Android/sdk/build-tools/27.0.2/apksigner verify -v  com.kefu.H03_V2.2.09_release.apk</code></pre><p>TY2</p><pre><code class="bash">/Users/fullwin/Library/Android/sdk/build-tools/27.0.2/apksigner verify -v com.kefu.TY2_V1.1.36_release.apk</code></pre><p>XB3</p><pre><code class="bash">apksigner verifyxinbao3-v0.3.31.apk/Users/fullwin/Library/Android/sdk/build-tools/27.0.2/apksigner verify -v /Users/fullwin/Documents/bocai/xinbao3/com.kefu.xinbao3-v0.3.31-release.apk</code></pre><p>XB5</p><pre><code class="bash">/Users/fullwin/Library/Android/sdk/build-tools/27.0.2/apksigner verify -v xinbao5-v0.5.36.apk</code></pre><h1 id="ios"><a href="#ios" class="headerlink" title="ios"></a><font color=red>ios</font></h1><pre><code class="bash">sudo ionic cordova build ios --prod --release</code></pre><p>ios签名指南<br><a href="http://note.youdao.com/noteshare?id=d999261faff831eac2ec0de9a6950e48" target="_blank" rel="noopener">查看详情</a>;<br><font color=red>wap</font><br>=====</p><pre><code class="bash">sudo ionic cordova build browser --prod --release</code></pre><h1 id="pc"><a href="#pc" class="headerlink" title="pc"></a><font color=red>pc</font></h1><pre><code class="bash">npm run clean:aotnpm run clean:distnpm run build:aot:prod</code></pre>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cordova </tag>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 建站、部署、托管</title>
      <link href="/2019/11/14/Hexo%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%89%98%E7%AE%A1github/"/>
      <url>/2019/11/14/Hexo%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%89%98%E7%AE%A1github/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装nodejs(Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本.使用低版本node项目会报错)、git</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><pre><code class="bash">npm install hexo-cli -g      // 下载hexo clihexo init &lt;项目名称&gt;          // 创建项目cd &lt;项目名称&gt;                 // 进入项目npm install                 // 下载依赖hexo server                 // 运行项目</code></pre><p>执行完上面的步骤，网站已经可以正常运行</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p> 以Hexo-theme-obsidian为例，</p><blockquote><p>参考地址：<a href="https://github.com/TriDiamond/hexo-theme-obsidian/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/TriDiamond/hexo-theme-obsidian/blob/master/README_CN.md</a></p></blockquote><p>进入网站的themes目录<br>安装主题</p><pre><code class="bash">git clone https://github.com/TriDiamond/hexo-theme-obsidian.git obsidian</code></pre><p>使用主题<br>打开 Hexo 配置文件 _config.yml, 设置主题为 obsidian</p><pre><code class="bash">...theme: obsidian...</code></pre><p>主题配置<br>打开 /themes/obsidian/_config.yml 文件可以改变主题配置<br>详细配置文件参考上面的地址</p><h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>使用搜索功能<br>安装</p><pre><code class="bach">$ npm install hexo-generator-search --save</code></pre><p>在你的根目录配置 _config.yml 里面添加hexo-generator-search的配置</p><pre><code class="bach">search:  path: search.xml  field: post  content: true</code></pre><p>重新生成静态文件</p><pre><code class="bach">hexo clean &amp;&amp; hexo g</code></pre><h3 id="部署git，并绑定域名"><a href="#部署git，并绑定域名" class="headerlink" title="部署git，并绑定域名"></a>部署git，并绑定域名</h3><p>创建Repositories<br><img src="http://downloadwebjs.com/20191114/20191114_18.png" alt=""><br><img src="http://downloadwebjs.com/20191114/20191114_02.png" alt=""><br>配置根目录下的 _config.yml 配置文件<br><img src="http://downloadwebjs.com/20191114/20191114_03.png" alt=""><br>根目录中添加CNAME文件，内容为你要配置的域名。 注意不要写”http://“，只保留后面的地址<br>选择setting<br><img src="http://downloadwebjs.com/20191114/20191114_04.png" alt=""><br>往下拉，找到GitHub Pages ，点击None，选择master branch<br><img src="http://downloadwebjs.com/20191114/20191114_05.png" alt=""><br>这个时候会出现Custom domain，填入的域名，注意不要写”http://“，Save<br><img src="http://downloadwebjs.com/20191114/20191114_06.png" alt=""></p><h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h3><p>完成上面的步骤之后，在项目中运行hexo clean &amp; hexo d<br>运行完之后代码会自动提交到git中</p><h3 id="完成绑定"><a href="#完成绑定" class="headerlink" title="完成绑定"></a>完成绑定</h3><p>提交完代码之后打开你的域名，此时可以正常访问</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/13/hello-world/"/>
      <url>/2019/11/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
